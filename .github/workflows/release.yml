name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build distributable zip
        run: |
          set -euo pipefail
          mkdir -p dist
          ZIP_NAME="CR30-ti3-Dispensary.zip"
          # Create a clean tree with only the pieces we want to ship
          mkdir -p release_tree
          cp -r src release_tree/
          # Copy README
          if [ -f README.md ]; then
            cp README.md release_tree/README.md
          else
            echo "# CR30 ti3 Dispensary" > release_tree/README.md
          fi
          # Ensure inputs/outputs contain only readmes/placeholders
          # Explicitly omit any example build artifacts
          rm -f release_tree/src/output/output_example.ti3 release_tree/src/output/output_example.icc || true
          rm -rf release_tree/src/output/* || true
          # Keep output readme with fixed name README_OUTPUTS.md
          if [ -f src/output/README_OUTPUTS.md ]; then
            cp src/output/README_OUTPUTS.md release_tree/src/output/README_OUTPUTS.md
          else
            echo "# Output folder\nThis folder will contain generated files (TI3/ICC)." > release_tree/src/output/README_OUTPUTS.md
          fi
          # Keep input readme & placeholders
          rm -rf release_tree/src/input/* || true
          mkdir -p release_tree/src/input
          # Copy a minimal set of safe placeholders/examples if present
          for f in README_INPUTS.md input_example.ti2 input_example.csv; do
            if [ -f "src/input/$f" ]; then
              cp "src/input/$f" "release_tree/src/input/$f"
            fi
          done
          # Create the zip artifact
          (cd release_tree && zip -r ../dist/$ZIP_NAME .)
          echo "artifact=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: |
            dist/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
